help(function_name)
example(function_name)
rep("string", 2)
list.files()
source("script_name.R")
________________________________________________________________________________________________________________________________________________

Vectors
list of values
c(1,2,3) -- c is courte form of "Combine"
Vectors cannot hold values with different modes (types). Try mixing modes and see what happens:
> c(1, TRUE, "three")
[1] "1"     "TRUE"  "three"
All the values were converted to a single mode (characters) so that the vector can hold them all.

Sequence Vectors
> 5:9
> seq(5,9)
seq also allows you to use increments other than 1. Try it with steps of 0.5:
> seq(5, 9, 0.5)
[1] 5.0 5.5 6.0 6.5 7.0 7.5 8.0 8.5 9.0

Vector Access 
> sentence <- c('walk', 'the', 'plank')
> sentence[3]
[1] "plank"
Many languages start array indices at 0, but R's vector indices start at 1. Get the first value by typing:
> sentence[1]
[1] "walk"
> sentence[c(1, 3)]
[1] "walk" "dog" 
> sentence[2:4]
[1] "the" "dog" "to" 

Vector Names
> ranks <- 1:3
> names(ranks) <- c("first", "second", "third")

Plotting One Vector
The barplot function draws a bar chart with a vector's values. We'll make a new vector for you, and store it in the vesselsSunk variable.
> vesselsSunk <- c(4, 5, 1)
> barplot(vesselsSunk)

Vector Math
> a <- c(1, 2, 3)
> a + 1
[1] 2 3 4
You can also take two vectors and compare each item. See which values in the a vector are equal to those in a second vector
> a == c(1, 99, 3)
[1]  TRUE FALSE  TRUE

graph that values from the first argument (x) are used for the horizontal axis, and values from the second (y) for the vertical
> values <- -10:10
> absolutes <- abs(values)
> plot(values, absolutes)

NA Values
> a <- c(1, 3, NA, 7, 9)
> sum(a)
[1] NA
The sum is considered "not available" by default because one of the vector's values was NA. This is the responsible thing to do; R won't just blithely add up the numbers without warning you about the incomplete data. We can explicitly tell sum (and many other functions) to remove NA values before they do their calculations,
Usage:
    sum(..., na.rm = FALSE)
...
> sum(a, na.rm = TRUE)
[1] 20
________________________________________________________________________________________________________________________________________________

Matrices
> matrix(0, 3, 4)
     [,1] [,2] [,3] [,4]
[1,]    0    0    0    0
[2,]    0    0    0    0
[3,]    0    0    0    0
> a <- 1:12
> print(a)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12
> matrix(a, 3, 4)
     [,1] [,2] [,3] [,4]
[1,]    1    4    7   10
[2,]    2    5    8   11
[3,]    3    6    9   12

The vector's values are copied into the new matrix, one by one. You can also re-shape the vector itself into a matrix. Create an 8-item vector:
 plank <- 1:8
The dim assignment function sets dimensions for a matrix. It accepts a vector with the number of rows and the number of columns to assign.
Assign new dimensions to plank by passing a vector specifying 2 rows and 4 columns (c(2, 4)):
dim(plank) <- c(2, 4) 
> print(plank)
     [,1] [,2] [,3] [,4]
[1,]    1    3    5    7
[2,]    2    4    6    8

> plank[2,]
[1] 2 4 6 8

> plank[, 2:4]
     [,1] [,2] [,3]
[1,]    3    5    7
[2,]    4    6    8

Matrix Plotting

Text output is only useful when matrices are small. When working with more complex data, you'll need something better. Fortunately, R includes powerful visualizations for matrix data.
It's pretty flat - everything is 1 meter above sea level. We'll create a 10 by 10 matrix with all its values initialized to 1 for you:
> elevation <- matrix(1, 10, 10)
> elevation[4, 6] <- 0
You can now do a contour map of the values simply by passing the matrix to the contour function:
> contour(elevation)
Or you can create a 3D perspective plot with the persp function:
The perspective plot looks a little odd, though. This is because persp automatically expands the view so that your highest value (the beach surface) is at the very top.
We can fix that by specifying our own value for the expand parameter.
> persp(elevation, expand=0.2)

________________________________________________________________________________________________________________________________________________

Mean

Determining the health of the crew is an important part of any inventory of the ship. Here's a vector containing the number of limbs each member has left, along with their names.

limbs <- c(4, 3, 4, 3, 2, 4, 4, 4)
names(limbs) <- c('One-Eye', 'Peg-Leg', 'Smitty', 'Hook', 'Scooter', 'Dan', 'Mikey', 'Blackbeard')
A quick way to assess our battle-readiness would be to get the average of the crew's appendage counts. Statisticians call this the "mean". Call the mean function with the limbs vector.
> mean(limbs)
[1] 3.5
An average closer to 4 would be nice, but this will have to do.

Here's a barplot of that vector:
> barplot(limbs)

Draw a horizontal line across the plot at the mean:
> abline(h = mean(limbs))

Median
The median is calculated by sorting the values and choosing the middle one (for sets with an even number of values, the middle two values are averaged).

Standard Deviation
Statisticians use the concept of "standard deviation" from the mean to describe the range of typical values for a data set. For a group of numbers, it shows how much they typically vary from the average value. To calculate the standard deviation, you calculate the mean of the values, then subtract the mean from each number and square the result, then average those squares, and take the square root of that average.

________________________________________________________________________________________________________________________________

Creating Factors
> chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
> types <- factor(chests)
> print(chests)
[1] "gold"   "silver" "gems"   "gold"   "gems"  
> print(types)
[1] gold   silver gems   gold   gems  
Levels: gems gold silver
Notice also that there are no quotes around the values. That's because they're not strings; they're actually integer references to one of the factor's levels.
> as.integer(types)
[1] 2 3 1 2 1
> levels(types)
[1] "gems"   "gold"   "silver"

Plots With Factors
> weights <- c(300, 200, 100, 250, 150)
> prices <- c(9000, 5000, 12000, 7500, 18000)
> plot(weights, prices)
We can't tell which chest is which, though. Fortunately, we can use different plot characters for each type by converting the factor to integers, and passing it to the pch argument of plot.
> plot(weights, prices, pch=as.integer(types))
"Circle", "Triangle", and "Plus Sign" still aren't great descriptions for treasure, though. Let's add a legend to show what the symbols mean.
The legend function takes a location to draw in, a vector with label names, and a vector with numeric plot character IDs.
> legend("topright", c("gems", "gold", "silver"), pch=1:3)
> legend("topright", levels(types), pch=1:length(levels(types)))

________________________________________________________________________________________________________________________________

Data Frames

The weights, prices, and types data structures are all deeply tied together, if you think about it. If you add a new weight sample, you need to remember to add a new price and type, or risk everything falling out of sync. To avoid trouble, it would be nice if we could tie all these variables together in a single data structure.

Fortunately, R has a structure for just this purpose: the data frame. You can think of a data frame as something akin to a database table or an Excel spreadsheet. It has a specific number of columns, each of which is expected to contain values of a particular type. It also has an indeterminate number of rows - sets of related values for each column.

treasure <- data.frame(weights, prices, types)
> print(treasure)
  weights prices  types
1     300   9000   gold
2     200   5000 silver
3     100  12000   gems
4     250   7500   gold
5     150  18000   gems

You can get individual columns by providing their index number in double-brackets. Try getting the second column (prices) of treasure:
> treasure[[2]]
[1]  9000  5000 12000  7500 18000

You could instead provide a column name as a string in double-brackets. (This is often more readable.) Retrieve the "weights" column:
RedoComplete
> treasure[["weights"]]
[1] 300 200 100 250 150

> treasure$prices
[1]  9000  5000 12000  7500 18000


Loading Data Frames-
target.csv files is as ->
"Port","Population","Worth"
"Cartagena",35000,10000
"Porto Bello",49000,15000
"Havana",140000,50000
"Panama City",105000,35000

> read.csv("targets.csv")
         Port Population Worth
1   Cartagena      35000 10000
2 Porto Bello      49000 15000
3      Havana     140000 50000
4 Panama City     105000 35000

The "infantry.txt" file has a similar format, but its fields are separated by tab characters rather than commas. Its content looks like this:

Port         Infantry
Porto Bello  700
Cartagena    500
Panama City  1500
Havana       2000

> read.table("infantry.txt", sep="\t")
           V1       V2
1        Port Infantry
2 Porto Bello      700
3   Cartagena      500
4 Panama City     1500
5      Havana     2000

> read.table("infantry.txt", sep="\t", header=TRUE)
         Port Infantry
1 Porto Bello      700
2   Cartagena      500
3 Panama City     1500
4      Havana     2000

Merging Data Frames
It joins two data frames together, using the contents of one or more columns.
The merge function takes arguments with an x frame (targets) and a y frame (infantry). By default, it joins the frames on columns with the same name (the two Port columns). See if you can merge the two frames:

> targets <- read.csv("targets.csv")
> infantry <- read.table("infantry.txt", sep="\t", header=TRUE)
> merge(x = targets, y = infantry)
         Port Population Worth Infantry
1   Cartagena      35000 10000      500
2      Havana     140000 50000     2000
3 Panama City     105000 35000     1500
4 Porto Bello      49000 15000      700

________________________________________________________________________________________________________________________________
Real-World Data

plot (countries$GDP, countries$Piracy)
It looks like there's a negative correlation between wealth and piracy - generally, the higher a nation's GDP, the lower the percentage of software installed that's pirated. But do we have enough data to support this connection? Is there really a connection at all?

R can test for correlation between two vectors with the cor.test function. Try calling it on the GDP and Piracy columns of the countries data frame:


> cor.test(countries$GDP, countries$Piracy)

	Pearson's product-moment correlation

data:  countries$GDP and countries$Piracy 
t = -14.8371, df = 107, p-value < 2.2e-16
alternative hypothesis: true correlation is not equal to 0 
95 percent confidence interval:
 -0.8736179 -0.7475690 
sample estimates:
       cor 
-0.8203183

The key result we're interested in is the "p-value". Conventionally, any correlation with a p-value less than 0.05 is considered statistically significant, and this sample data's p-value is definitely below that threshold. In other words, yes, these data do show a statistically significant negative correlation between GDP and software piracy.

We have more countries represented in our GDP data than we do our piracy rate data. If we know a country's GDP, can we use that to estimate its piracy rate?

We can, if we calculate the linear model that best represents all our data points (with a certain degree of error). The lm function takes a model formula, which is represented by a response variable (piracy rate), a tilde character (~), and a predictor variable (GDP). (Note that the response variable comes first.)

Try calculating the linear model for piracy rate by GDP, and assign it to the line variable:

RedoComplete
> line <- lm(countries$Piracy ~ countries$GDP)
> abline(line)

ggplot2
> install.packages("ggplot2")
> help(package = "ggplot2")
                Information on package 'ggplot2'
Description:
Package:            ggplot2
Type:               Package
Title:              An implementation of the Grammar of Graphics
Version:            0.9.1

> weights <- c(300, 200, 100, 250, 150)
> prices <- c(9000, 5000, 12000, 7500, 18000)
> chests <- c('gold', 'silver', 'gems', 'gold', 'gems')
> types <- factor(chests)
> qplot(weights, prices, color = types)
 An attractive grid background and colorful legend, without any of the configuration hassle from before!
